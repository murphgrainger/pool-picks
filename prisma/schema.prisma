datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              Int           @id @default(autoincrement())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  email           String        @unique
  nickname        String?       @unique
  role            Role          @default(USER)
  pool_members    PoolMember[]
}

enum Role {
  USER
  ADMIN
}

model Link {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String
  url         String
  category    String
}

model Tournament {
  id          Int       @id @default(autoincrement())
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  name        String    @unique
  start_date  DateTime  @db.Date
  end_date    DateTime  @db.Date
  course      String  
  city        String
  region      String
  status      String     @default("Scheduled")
  external_id Int?
  athletes    AthletesInTournaments[]
  pools       Pool[]
}

model Athlete {
  id          Int       @id @default(autoincrement())
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  first_name  String?
  last_name   String?
  full_name   String    @unique
  ranking     Int?
  external_id Int?
  tournaments AthletesInTournaments[]
  poolMembers PoolMembersAthletes[]
}

model AthletesInTournaments {
  status              String @default("Active")
  position            Int?
  thru                Int?
  score_today         Int?
  score_round_one     Int?
  score_round_two     Int?
  score_round_three   Int?
  score_round_four    Int?
  score_playoff       Int?
  score_sum           Int?
  score_under_par     Int?
  tournament_id       Int
  athlete_id          Int
  tournament          Tournament  @relation(fields: [tournament_id], references: [id])
  athlete             Athlete     @relation(fields: [athlete_id], references: [id])
  assigned_at         DateTime  @default(now())
  updated_at          DateTime  @updatedAt

  @@id([tournament_id, athlete_id])
}

model Pool {
  id              Int       @id @default(autoincrement())
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  name            String 
  status          String      @default("Setup")
  invite_code     String?
  amount_entry    Int     
  amount_sum      Int?        @default(0)
  tournament_id   Int
  tournament      Tournament @relation(fields: [tournament_id], references: [id])
  pool_invites    PoolInvite[]
  pool_members    PoolMember[]
}

model PoolInvite {
  id              Int       @id @default(autoincrement())
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  email           String
  nickname        String
  status          String    @default("Invited")
  pool_id         Int
  pool            Pool      @relation(fields: [pool_id], references: [id])
}

model PoolMember {
    id              Int       @id @default(autoincrement())
    created_at      DateTime  @default(now())
    pool_id         Int
    pool            Pool      @relation(fields: [pool_id], references: [id])
    user_id         Int
    user            User      @relation(fields: [user_id], references: [id])
    athletes        PoolMembersAthletes[]
}

model PoolMembersAthletes {
    poolMember_id       Int
    athlete_id          Int
    poolMember          PoolMember  @relation(fields: [poolMember_id], references: [id])
    athlete             Athlete     @relation(fields: [athlete_id], references: [id])
    assigned_at         DateTime    @default(now())
    
    @@id([poolMember_id, athlete_id])
}